// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// -------------------------
// Models
// -------------------------
model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String
  provider    String        @default("mock")
  createdAt   DateTime      @default(now())
  favorites   Favorite[]
  spins       Spin[]
  PartyMember PartyMember[]
}

// NOTE: Legacy Category model removed.

// Dish is the canonical source for spins/favorites.
// We store mealCategory as STRING ("breakfast" | "lunch" | "dinner" | "dessert").
// We’ll enforce validity in code and via seed/recategorizer scripts.
model Dish {
  id           String  @id @default(cuid())
  name         String
  mealCategory String // "breakfast" | "lunch" | "dinner" | "dessert"
  description  String? // <— add this line

  tags      String  @default("")
  allergens String  @default("")
  costBand  Int
  timeBand  Int
  isHealthy Boolean @default(false)
  ytQuery   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Favorite[] @relation("DishFavorites")

  category String? @ignore

  @@index([mealCategory])
}

model Spin {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  reelsJson     String
  lockedJson    String
  resultDishIds String
  powerupsJson  String
  createdAt     DateTime @default(now())
}

model Party {
  id              String        @id @default(cuid())
  code            String        @unique
  hostId          String?
  isActive        Boolean       @default(true)
  constraintsJson String
  createdAt       DateTime      @default(now())
  members         PartyMember[]
}

model PartyMember {
  id        String   @id @default(cuid())
  partyId   String
  party     Party    @relation(fields: [partyId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  prefsJson String
  joinedAt  DateTime @default(now())
}

model Favorite {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  dishId String
  dish   Dish   @relation("DishFavorites", fields: [dishId], references: [id])
}
