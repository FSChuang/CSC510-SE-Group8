// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  provider    String       @default("mock")
  createdAt   DateTime     @default(now())
  favorites   Favorite[]
  spins       Spin[]
  PartyMember PartyMember[]
}

model Category {
  id   String @id        // e.g. "main", "veggie"
  name String @unique
  tags String
  // IMPORTANT: no dishes[] field here â€” keeps Dish.category scalar
}

model Dish {
  id          String   @id
  name        String
  category    String
  tags        String    @default("")  // CSV
  allergens   String    @default("")  // CSV
  costBand    Int
  timeBand    Int
  isHealthy   Boolean  @default(false)
  ytQuery     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // NEW: back-reference for favorites
  favorites   Favorite[] @relation("DishFavorites")
}

model Spin {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  reelsJson     String
  lockedJson    String
  resultDishIds String
  powerupsJson  String
  createdAt     DateTime @default(now())
}

model Party {
  id              String       @id @default(cuid())
  code            String       @unique
  hostId          String?
  isActive        Boolean      @default(true)
  constraintsJson String
  createdAt       DateTime     @default(now())
  members         PartyMember[]
}

model PartyMember {
  id       String   @id @default(cuid())
  partyId  String
  party    Party    @relation(fields: [partyId], references: [id])
  userId   String?
  user     User?    @relation(fields: [userId], references: [id])
  prefsJson String
  joinedAt DateTime @default(now())
}

model Favorite {
  id     String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  dishId String
  dish   Dish   @relation("DishFavorites", fields: [dishId], references: [id])
}